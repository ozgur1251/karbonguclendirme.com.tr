---
import Layout from '../layouts/Layout.astro';
import HomeSlider from '../components/HomeSlider.astro';
import ServiceCards from '../components/ServiceCards.astro';
import { HOMEPAGE } from '../config/content';

const { features, services, process, gallery, about, technical, brands } = HOMEPAGE;
---

<Layout>
  <!-- Hero Slider -->
  <HomeSlider />

  <!-- Features Section -->
  <section class="py-12 bg-gradient-to-b from-gray-50 to-white relative overflow-hidden">
    <div class="absolute inset-0 bg-[url('/images/grid.svg')] opacity-5"></div>
    <div class="container mx-auto px-4 relative">
      <div class="text-center max-w-3xl mx-auto mb-10">
        <h1 class="text-4xl lg:text-5xl font-bold mb-4 bg-gradient-to-r from-gray-900 to-gray-700 bg-clip-text text-transparent">
          {features.title}
        </h1>
        <div class="w-20 h-1.5 bg-green-500 mx-auto rounded-full mb-4"></div>
        <p class="text-gray-600 text-lg leading-relaxed">{features.description}</p>
      </div>
      
      <div class="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
        {features.items.map((feature, index) => (
          <div class="group bg-white p-6 rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 border border-gray-100 relative overflow-hidden">
            <div class="absolute top-0 left-0 w-2 h-full bg-gradient-to-b from-green-500 to-green-600 transform -translate-x-full group-hover:translate-x-0 transition-transform duration-300"></div>
            <div class="relative">
              <div class="w-14 h-14 bg-green-50 rounded-2xl flex items-center justify-center mb-4 group-hover:scale-110 transition-transform duration-300">
                <span class="text-3xl text-green-600">{feature.icon}</span>
              </div>
              <h2 class="text-xl font-bold mb-3 text-gray-900 group-hover:text-green-600 transition-colors">
                {feature.title}
              </h2>
              <p class="text-gray-600 leading-relaxed">
                {feature.description}
              </p>
            </div>
            <div class="absolute bottom-0 right-0 w-20 h-20 bg-green-50 rounded-tl-[100px] -z-10 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
          </div>
        ))}
      </div>
    </div>
  </section>

  <!-- Services Section -->
  <section class="py-10 bg-gradient-to-br from-gray-50 to-white relative overflow-hidden">
    <div class="absolute inset-0 bg-[url('/images/grid.svg')] opacity-5"></div>
    <div class="container mx-auto px-4">
      <div class="text-center max-w-3xl mx-auto mb-10">
        <h2 class="text-4xl lg:text-5xl font-bold mb-4 bg-gradient-to-r from-gray-900 to-gray-700 bg-clip-text text-transparent">
          {services.title}
        </h2>
        <div class="w-20 h-1.5 bg-green-500 mx-auto rounded-full mb-4"></div>
        <p class="text-gray-600 text-lg leading-relaxed">{services.description}</p>
      </div>
      <ServiceCards />
    </div>
  </section>

  <!-- Process Section -->
  <section class="py-12 bg-gradient-to-br from-gray-50 to-white relative overflow-hidden">
    <div class="absolute inset-0 bg-[url('/images/grid.svg')] opacity-5"></div>
    <div class="container mx-auto px-4 relative">
      <div class="text-center max-w-3xl mx-auto mb-12">
        <h2 class="text-4xl lg:text-5xl font-bold mb-4 bg-gradient-to-r from-gray-900 to-gray-700 bg-clip-text text-transparent">
          {process.title}
        </h2>
        <div class="w-20 h-1.5 bg-green-500 mx-auto rounded-full mb-6"></div>
        <p class="text-gray-600 text-lg leading-relaxed">{process.description}</p>
      </div>
      
      <div class="relative">
        <div class="absolute top-1/2 left-0 w-full h-1 bg-green-200 -translate-y-1/2 hidden lg:block"></div>
        <div class="grid md:grid-cols-3 lg:grid-cols-5 gap-6">
          {process.steps.map((step, index) => (
            <div class="relative bg-white rounded-xl p-6 shadow-lg hover:shadow-xl transition-all duration-300 border border-gray-100">
              <div class="absolute -top-4 left-1/2 -translate-x-1/2 w-8 h-8 bg-green-500 text-white rounded-full flex items-center justify-center font-bold">
                {step.number}
              </div>
              <h3 class="text-xl font-bold mb-3 mt-4 text-center">{step.title}</h3>
              <p class="text-gray-600 text-center">{step.description}</p>
            </div>
          ))}
        </div>
      </div>
    </div>
  </section>

  <!-- About Section -->
  <section class="py-12 bg-gradient-to-br from-gray-50 to-white">
    <div class="container mx-auto px-4">
      <div class="grid lg:grid-cols-2 gap-16 items-center">
        <div class="order-2 lg:order-1">
          <div class="mb-8">
            <h2 class="text-4xl lg:text-5xl font-bold mb-3 bg-gradient-to-r from-gray-900 to-gray-700 bg-clip-text text-transparent">
              {about.title}
            </h2>
            <h3 class="text-xl text-green-600 font-medium">{about.subtitle}</h3>
          </div>
          
          <p class="text-gray-600 mb-10 text-lg leading-relaxed">
            {about.description}
          </p>
          
          <div class="grid grid-cols-2 sm:grid-cols-4 gap-6 mb-10">
            {about.statistics.map(stat => (
              <div class="text-center p-4 bg-white rounded-xl shadow-md hover:shadow-lg transition-all duration-300 border border-gray-100">
                <div class="text-3xl lg:text-4xl font-bold text-green-600 mb-1">{stat.value}</div>
                <div class="text-gray-600 text-sm">{stat.label}</div>
              </div>
            ))}
          </div>

          <div class="grid sm:grid-cols-2 gap-6">
            {about.features.map(feature => (
              <div class="bg-white p-4 rounded-xl shadow-md hover:shadow-lg transition-all duration-300 border border-gray-100">
                <div class="flex items-center space-x-4">
                  <div class="flex-shrink-0 w-12 h-12 bg-green-50 rounded-lg flex items-center justify-center text-2xl text-green-600">
                    {feature.icon}
                  </div>
                  <div>
                    <h4 class="font-semibold text-gray-900 mb-1">{feature.title}</h4>
                    <p class="text-sm text-gray-600">{feature.description}</p>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
        
        <div class="order-1 lg:order-2 relative">
          <div class="relative">
            <div class="absolute inset-0 bg-gradient-to-tr from-green-600/20 to-transparent rounded-2xl"></div>
            <img 
              src={about.image} 
              alt="Hakkımızda" 
              class="rounded-2xl shadow-2xl w-full object-cover h-[600px]"
              loading="lazy"
              decoding="async"
            />
          </div>
          <div class="absolute -bottom-6 -right-6 w-48 h-48 bg-green-50 rounded-2xl -z-10"></div>
          <div class="absolute -top-6 -left-6 w-48 h-48 bg-gray-50 rounded-2xl -z-10"></div>
        </div>
      </div>
    </div>
  </section>

  <!-- Gallery Section -->
  <section class="py-12 bg-gradient-to-br from-gray-50 to-white relative overflow-hidden">
    <div class="container mx-auto px-4">
      <div class="text-center max-w-3xl mx-auto mb-16">
        <h2 class="text-3xl md:text-4xl font-bold mb-4">{gallery.title}</h2>
        <p class="text-gray-600 mb-8">{gallery.description}</p>
      </div>
      
      <div class="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
        {gallery.items.map((item, index) => (
          <div class="group relative overflow-hidden rounded-xl shadow-lg">
            <img 
              src={item.image} 
              alt={item.title} 
              class="w-full h-64 object-cover transform group-hover:scale-110 transition-transform duration-500"
              loading="lazy"
              decoding="async"
            />
            <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-black/50 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300">
              <div class="absolute inset-0 p-6 text-white flex flex-col justify-end">
                <span class="text-sm font-medium bg-green-500 px-3 py-1 rounded-full inline-block mb-2 w-fit">
                  {item.category}
                </span>
                <h3 class="text-xl font-bold mb-2">{item.title}</h3>
                <p class="text-sm opacity-90 mb-4">{item.description}</p>
                <div class="grid grid-cols-2 gap-4 text-sm">
                  <div>
                    <span class="block text-gray-400">Lokasyon</span>
                    <span>{item.details.location}</span>
                  </div>
                  <div>
                    <span class="block text-gray-400">Alan</span>
                    <span>{item.details.area}</span>
                  </div>
                  <div>
                    <span class="block text-gray-400">Süre</span>
                    <span>{item.details.duration}</span>
                  </div>
                  <div>
                    <span class="block text-gray-400">Sistem</span>
                    <span>{item.details.type}</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  </section>

  <!-- Technical Section -->
  <section class="py-12 bg-gradient-to-br from-gray-50 to-white relative overflow-hidden">
    <div class="absolute inset-0 bg-[url('/images/grid.svg')] opacity-5"></div>
    <div class="container mx-auto px-4 relative">
      <div class="text-center max-w-3xl mx-auto mb-12">
        <h2 class="text-4xl lg:text-5xl font-bold mb-4 bg-gradient-to-r from-gray-900 to-gray-700 bg-clip-text text-transparent">
          {technical.title}
        </h2>
        <div class="w-20 h-1.5 bg-green-500 mx-auto rounded-full mb-6"></div>
        <p class="text-gray-600 text-lg leading-relaxed">{technical.description}</p>
      </div>
      
      <div class="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
        {technical.items.map(item => (
          <a 
            href={item.link}
            class="group relative bg-white p-6 rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 border border-gray-100 overflow-hidden"
          >
            <div class="absolute top-0 left-0 w-2 h-full bg-gradient-to-b from-green-500 to-green-600 transform -translate-x-full group-hover:translate-x-0 transition-transform duration-300"></div>
            <div class="relative">
              <div class="w-14 h-14 bg-green-50 rounded-2xl flex items-center justify-center mb-4 group-hover:scale-110 transition-transform duration-300">
                <span class="text-3xl text-green-600">📚</span>
              </div>
              <h3 class="text-xl font-bold mb-3 text-gray-900 group-hover:text-green-600 transition-colors">
                {item.title}
              </h3>
              <p class="text-gray-600 mb-6 line-clamp-3">
                {item.content}
              </p>
              <div class="flex items-center text-green-600 font-medium group-hover:translate-x-2 transition-transform duration-300">
                Detaylı Bilgi
                <svg class="w-5 h-5 ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3" />
                </svg>
              </div>
            </div>
            <div class="absolute bottom-0 right-0 w-20 h-20 bg-green-50 rounded-tl-[100px] -z-10 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
          </a>
        ))}
      </div>
    </div>
  </section>

  <!-- Brands Section -->
  <section class="py-10 bg-gradient-to-br from-gray-50 to-white overflow-hidden">
    <div class="container mx-auto px-4">
      <div class="text-center max-w-3xl mx-auto mb-8">
        <h2 class="text-3xl font-bold mb-3">{brands.title}</h2>
        <p class="text-gray-600">{brands.description}</p>
      </div>
      
      <div class="relative px-8">
        <!-- Prev Button -->
        <button 
          class="absolute left-0 top-1/2 -translate-y-1/2 z-10 bg-white/90 p-2.5 rounded-full shadow-lg hover:bg-white transition-all duration-300 focus:outline-none group hidden md:block" 
          id="prevBrand"
          aria-label="Önceki"
        >
          <svg class="w-5 h-5 text-gray-600 group-hover:text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
          </svg>
        </button>

        <!-- Next Button -->
        <button 
          class="absolute right-0 top-1/2 -translate-y-1/2 z-10 bg-white/90 p-2.5 rounded-full shadow-lg hover:bg-white transition-all duration-300 focus:outline-none group hidden md:block" 
          id="nextBrand"
          aria-label="Sonraki"
        >
          <svg class="w-5 h-5 text-gray-600 group-hover:text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
          </svg>
        </button>

        <!-- Brands Slider -->
        <div class="overflow-hidden" id="brandsContainer">
          <div class="flex gap-3 transition-transform duration-300 ease-out" id="brandsTrack">
            {brands.items.map(brand => (
              <div class="flex-none w-[160px]">
                <div class="bg-white p-3 rounded-lg shadow-sm hover:shadow-md transition-all duration-300 h-full flex flex-col justify-between border border-gray-100">
                  <div class="flex items-center justify-center h-14 mb-2">
                    <img 
                      src={brand.logo} 
                      alt={brand.name} 
                      class="h-12 w-auto object-contain filter grayscale hover:grayscale-0 transition-all duration-300"
                      loading="lazy"
                      decoding="async"
                    />
                  </div>
                  <div class="text-center">
                    <h3 class="font-medium text-gray-800 text-sm">{brand.name}</h3>
                    <p class="text-xs text-gray-500 line-clamp-1">{brand.description}</p>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- CTA Section -->
  <section class="py-12 bg-gradient-to-br from-green-600 to-green-700 text-white">
    <div class="container mx-auto px-4 text-center">
      <h2 class="text-3xl md:text-4xl font-bold mb-6">Ücretsiz Keşif ve Danışmanlık</h2>
      <p class="text-xl text-green-100 mb-8 max-w-2xl mx-auto">
        Yapınızın güçlendirme ihtiyaçları için uzman ekibimizden ücretsiz danışmanlık alın
      </p>
      <div class="flex flex-wrap justify-center gap-4">
        <a 
          href="/iletisim" 
          class="inline-flex items-center px-8 py-3 bg-white text-green-600 font-semibold rounded-lg hover:bg-green-50 transition-colors"
        >
          İletişime Geçin
          <svg class="w-5 h-5 ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3" />
          </svg>
        </a>
        <a 
          href="/teknik/karbon-fiber-nedir" 
          class="inline-flex items-center px-8 py-3 border-2 border-white text-white font-semibold rounded-lg hover:bg-white hover:text-green-600 transition-colors"
        >
          Teknik Bilgi Alın
        </a>
      </div>
    </div>
  </section>
</Layout>

<script>
  const brandsTrack = document.getElementById('brandsTrack');
  const prevButton = document.getElementById('prevBrand');
  const nextButton = document.getElementById('nextBrand');
  const container = document.getElementById('brandsContainer');
  
  let currentPosition = 0;
  const cardWidth = 200; // card width + gap
  const gap = 32; // gap between cards
  
  function updateButtons() {
    if (!brandsTrack || !container) return;
    
    const maxScroll = brandsTrack.scrollWidth - container.clientWidth;
    prevButton?.classList.toggle('opacity-50', currentPosition >= 0);
    nextButton?.classList.toggle('opacity-50', currentPosition <= -maxScroll);
  }

  function slide(direction: 'prev' | 'next') {
    if (!brandsTrack || !container) return;
    
    const containerWidth = container.clientWidth;
    const maxScroll = brandsTrack.scrollWidth - containerWidth;
    const slidesVisible = Math.floor(containerWidth / (cardWidth + gap));
    const slideAmount = (cardWidth + gap) * slidesVisible;
    
    if (direction === 'next') {
      currentPosition = Math.max(-maxScroll, currentPosition - slideAmount);
    } else {
      currentPosition = Math.min(0, currentPosition + slideAmount);
    }

    brandsTrack.style.transform = `translateX(${currentPosition}px)`;
    updateButtons();
  }

  prevButton?.addEventListener('click', () => slide('prev'));
  nextButton?.addEventListener('click', () => slide('next'));

  // Touch/swipe support
  let touchStartX = 0;
  let touchEndX = 0;

  container?.addEventListener('touchstart', (e) => {
    touchStartX = e.changedTouches[0].screenX;
  }, { passive: true });

  container?.addEventListener('touchend', (e) => {
    touchEndX = e.changedTouches[0].screenX;
    const diff = touchStartX - touchEndX;

    if (Math.abs(diff) > 50) { // minimum swipe distance
      if (diff > 0) {
        slide('next');
      } else {
        slide('prev');
      }
    }
  }, { passive: true });

  // Initial button state
  updateButtons();

  // Update on window resize
  window.addEventListener('resize', updateButtons);
</script> 